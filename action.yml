name: R Image Creator
author: Daphne Grasselly
description: |
  Creates R images on demand, given a base R image, a set of system dependencies, an renv lock file or even a set of R packages along with repositories that can be used for installing dependencies.
  This action will publish packages exclusively to ghcr.io (Github Container Registry). DockerHub is not supported at the moment.

env:
  REGISTRY: ghcr.io

inputs:
  image-name:
    description: name of the image that will be stored into ghcr
    required: false
    default: "rocker/rstudio:4.2.2"
  repository_owner: 
    description: Repository owner (image will be pushed on ghcr/repository_owner)
    required: true
  repo-user:
    description: User access project container registry 
    required: true
  repo-token:
    description: Token to access project container registry 
    required: true
  tag:
    description: |
      Custom Image Tag/Version. Defaults to current date in the `YYYY.MM.DD` format if unspecified.
    required: false
    default: ""
  tag-latest:
    description: Tag image as `latest`
    default: false
    type: boolean
  base-image:
    description: 'Base image'
    required: false
    default: 'rocker/rstudio:4.2.2'
  sysdeps:
    description: |
      A list of system dependencies to install on the image.
      This should be a comma-separated list of sysdeps.
      Eg: 'libxml2,adoptopenjdk-8,tcltk'
      Note that the sysdeps name should be OS-specific.
      Right now, only Debian OSes (installable via apt) are supported.
    required: false
    default: ''
  renv-lock-file:
    description: |
      A location of an renv.lock file that should be restored on the image.
      This can also be a remote location (i.e. a GitHub raw URL etc).
    required: false
    default: ''
  packages:
    description: |
      A comma-separated list of R packages that should be installed on the image. Dependencies will be fetched from the 'repos' option specified below.
      Eg: 'pharmaverse/admiral,pharmaverse/admiralonco,dplyr'
    required: false
    default: ''
  repos:
    description: |
      A comma-separated set of R package repository URLs that can be used for getting dependencies for the 'packages' installed.
      Eg: 'https://cloud.r-project.org,https://cran.r-project.org'
    required: false
    default: 'https://cloud.r-project.org'

runs:
  using: "composite"
  steps:
    - name: Checkout repository üí≥
      uses: actions/checkout@v3

    - name: Define tag
      id: tag
      run: |
        tag="${{ inputs.tag }}"  
        if [ -z "${tag}" ]
        then
          tag=$(date +%Y.%m.%d)
        fi
        echo "tag=${tag}" >> $GITHUB_OUTPUT
        echo "REGISTRY = ${{ env.REGISTRY }}"
      shell: bash

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      id: buildx
      with:
        install: true

    - name: Cache Docker layers ‚ôªÔ∏è
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ inputs.image-name }}
        restore-keys: |
          ${{ runner.os }}-buildx-${{ inputs.image-name }}

    - name: Log in to the Container registry üóù
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ inputs.repo-user }} # ${{ github.actor }}
        password: ${{ inputs.repo-token }} # ${{ secrets.GITHUB_TOKEN }}

    - name: Set build variables üìê
      id: build_vars
      run: |
        # Set Image name
        image_name="${{ inputs.image-name }}"
        tag="${{ steps.tag.outputs.tag }}"
        tag_latest="${{ inputs.tag_latest }}"

        # Set full image name
        full_names="${{ env.REGISTRY }}/${{ inputs.repository_owner }}/${image_name}:${tag}"
        if [ "${tag_latest}" == "true" ]
        then
          full_names="$full_names,${{ env.REGISTRY }}/${{ inputs.repository_owner }}/${image_name}:latest"
        fi
        echo "FULL_NAMES=${full_names}" >> $GITHUB_OUTPUT
      shell: bash

    - name: Debug traces
      run: |
        ls -al
      shell: bash

    - name: Build and push image üèó
      uses: docker/build-push-action@v3
      with:
        context: ./
        file: Dockerfile
        push: true
        tags: ${{ steps.build_vars.outputs.FULL_NAMES }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new
        build-args: |
          BASE_IMAGE="${{ inputs.base-image }}"
          SYSDEPS="${{ inputs.base-image }}"
          RENV_LOCK="${{ inputs.renv-lock-file }}"
          OTHER_PKG="${{ inputs.packages }}"
          REPOS="${{ inputs.repos }}"
        platforms: linux/amd64

    - name: Move cache ‚ôªÔ∏è
      run: |
        rm -rf /tmp/.buildx-cache
        if [ -f /tmp/.buildx-cache-new ]
        then {
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
        }
        fi
      shell: bash

